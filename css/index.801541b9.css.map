{"version":3,"sources":["webpack:///src/components/src/components/NavigationBar.vue","webpack:///src/components/FieldCanvas/src/components/FieldCanvas/Plot.vue","webpack:///src/components/FieldCanvas/src/components/FieldCanvas/Tile.vue","webpack:///src/components/src/components/FieldCanvas.vue","webpack:///src/components/StatusBar/src/components/StatusBar/SeasonSwitch.vue","webpack:///src/components/StatusBar/CropSelector/src/components/StatusBar/CropSelector/CropRow.vue","webpack:///src/components/StatusBar/CropSelector/src/components/StatusBar/CropSelector/SeasonFilter.vue","webpack:///src/components/StatusBar/CropSelector/src/components/StatusBar/CropSelector/NutrientFilter.vue","webpack:///src/components/StatusBar/src/components/StatusBar/CropSelector.vue","webpack:///src/components/StatusBar/Inspector/src/components/StatusBar/Inspector/NutrientList.vue","webpack:///src/components/StatusBar/Inspector/src/components/StatusBar/Inspector/YieldList.vue","webpack:///src/components/StatusBar/Inspector/src/components/StatusBar/Inspector/SeedList.vue","webpack:///src/components/StatusBar/src/components/StatusBar/Inspector.vue","webpack:///src/components/StatusBar/Exporter/src/components/StatusBar/Exporter/SaveSlot.vue","webpack:///src/components/StatusBar/src/components/StatusBar/Exporter.vue","webpack:///src/components/StatusBar/src/components/StatusBar/Importer.vue","webpack:///src/components/src/components/StatusBar.vue","webpack:///src/components/ToolBar/src/components/ToolBar/Tool.vue","webpack:///src/components/src/components/ToolBar.vue","webpack:///src/components/src/components/Startup.vue","webpack:///src/src/App.vue"],"names":[],"mappings":"AAyBA,iCACA,WAAA,CACA,iBAAA,CACA,kBAAA,CAEA,YAAA,CACA,oBAAA,CACA,0BAAA,CACA,kBACA,CAEA,wCACA,aAAA,CACA,kBAAA,CACA,UAAA,CACA,2EAIA,CACA,aACA,CAEA,4CACA,WACA,CAEA,kDACA,iCACA,CAEA,yCACA,aACA,CCkJA,uBACA,WAAA,CACA,mBAAA,CACA,oBAAA,CACA,qBAAA,CACA,iBACA,CAEA,2BACA,iBAAA,CACA,UAAA,CACA,QAAA,CACA,yBAAA,CACA,mBACA,CAEA,6BACA,gCACA,CAEA,wCACA,iDACA,CAEA,sCACA,kDACA,CAEA,wCACA,kDACA,CCiBA,uBACA,WAAA,CACA,kDAAA,CACA,qBAAA,CACA,qBACA,CAEA,+BACA,2DAAA,CACA,qBAAA,CACA,wBAAA,CACA,wBACA,CAEA,iCACA,WACA,CAEA,6BACA,mBACA,CAEA,mCACA,kDACA,CAEA,iCACA,mDACA,CAEA,mCACA,kDACA,CCrJA,+BACA,qBAAA,CACA,wBAAA,CACA,2CAAA,CACA,iBAAA,CACA,eAAA,CACA,cACA,CAEA,kCACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,8BAAA,CAEA,YACA,CAEA,oCACA,+BACA,WAAA,CACA,eAAA,CACA,SACA,CAEA,kCACA,QACA,CACA,CClIA,gCACA,cAAA,CAEA,SAAA,CACA,gBAAA,CACA,WACA,CAEA,sCACA,gCACA,CAEA,kCACA,8FACA,CAEA,wCACA,wHACA,CCUA,2BACA,kBAAA,CACA,6BAAA,CACA,WAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBACA,CAEA,iCACA,iDACA,CAEA,yCACA,0BACA,CAEA,6BACA,YAAA,CACA,WAAA,CACA,ovIAAA,CACA,uBACA,CAEA,mCACA,UACA,CAEA,iCACA,cACA,CAEA,qCACA,UACA,CAEA,8BACA,YAAA,CACA,oBAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBACA,CAEA,0CACA,iBACA,CAEA,iCACA,YAAA,CACA,oBAAA,CACA,sBAAA,CACA,kBACA,CAEA,qCACA,gBAAA,CACA,iBACA,CAEA,+BACA,YAAA,CACA,oBAAA,CACA,sBAAA,CACA,kBAAA,CACA,iBACA,CAEA,mCACA,eAAA,CACA,gBACA,CCzFA,oCACA,UACA,CC0BA,kCACA,YAAA,CACA,yBACA,CAEA,4CACA,WAAA,CACA,2BAAA,CACA,qBACA,CAEA,6CACA,2BAAA,CACA,WAAA,CACA,iBAAA,CACA,qBACA,CC8BA,aACA,gBAAA,CACA,mBACA,CAEA,4CACA,YAAA,CACA,oBAAA,CACA,4BAAA,CACA,kBAAA,CAEA,YACA,CAEA,kBACA,gCACA,CAEA,qBACA,8FACA,CAEA,2BACA,wHACA,CC5GA,gCACA,cAAA,CACA,YAAA,CACA,oBAAA,CACA,4BAAA,CACA,kBACA,CAEA,qCACA,oBAAA,CACA,UACA,CCGA,6BACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,0BAAA,CACA,kBAAA,CACA,wBACA,CAEA,8BACA,iBACA,CAEA,kCACA,oBAAA,CACA,UACA,CC7BA,4BACA,cAAA,CACA,YAAA,CACA,kBAAA,CACA,0BAAA,CACA,kBAAA,CACA,wBACA,CAEA,6BACA,iBACA,CAEA,iCACA,oBAAA,CACA,UACA,CAEA,uCACA,gBACA,CC6GA,oCACA,eAAA,CACA,kBACA,CAEA,+BACA,cACA,CAEA,0BACA,cAAA,CACA,gBACA,CAEA,mCACA,oBAAA,CACA,UACA,CAEA,iCACA,cAAA,CACA,QAAA,CACA,iBACA,CAEA,8BACA,aACA,CCzIA,+BACA,YAAA,CACA,oBAAA,CACA,0BAAA,CACA,sBACA,CAEA,0CACA,YAAA,CACA,WAAA,CACA,iBAAA,CACA,iBACA,CAEA,0CACA,cAAA,CACA,WAAA,CACA,eACA,CAEA,8BACA,cAAA,CACA,YAAA,CACA,oBAAA,CACA,0BAAA,CACA,sBACA,CAEA,yCACA,WACA,CAEA,2CACA,aACA,CAEA,iDACA,aACA,CC6FA,8BACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,cACA,CAEA,oCACA,aAAA,CACA,kBACA,CAEA,wBACA,aAAA,CACA,WAAA,CACA,aAAA,CACA,UAAA,CACA,kBAAA,CACA,2BAAA,CACA,oBAAA,CACA,wBACA,CAEA,8CACA,wBACA,CAEA,iCACA,WAAA,CACA,kBACA,CAEA,qCACA,kBAAA,CACA,6BAAA,CACA,WAAA,CACA,iBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBACA,CAEA,2CACA,iDACA,CAEA,mDACA,0BACA,CAEA,oCACA,WACA,CCnGA,8BACA,iBAAA,CACA,eAAA,CACA,kBAAA,CACA,cACA,CAEA,oCACA,aAAA,CACA,kBACA,CAEA,8BACA,YACA,CAEA,6DACA,aAAA,CACA,WAAA,CACA,aAAA,CACA,kBAAA,CACA,2BAAA,CACA,wBAAA,CACA,wBACA,CAEA,yFACA,wBACA,CAEA,iCACA,WAAA,CACA,kBACA,CAEA,qCACA,kBAAA,CACA,6BAAA,CACA,WAAA,CACA,iBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBACA,CAEA,2CACA,iDACA,CAEA,mDACA,0BACA,CAEA,oCACA,WACA,CChEA,YACA,WAAA,CACA,kBACA,CAEA,gBACA,2BAAA,CACA,iBACA,CAEA,oCACA,2BAAA,CACA,aAAA,CACA,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,QAAA,CACA,4BAAA,CACA,aACA,CATA,wCACA,2BAAA,CACA,aAAA,CACA,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,QAAA,CACA,4BAAA,CACA,aACA,CATA,iDACA,2BAAA,CACA,aAAA,CACA,kBAAA,CACA,UAAA,CACA,iBAAA,CACA,QAAA,CACA,4BAAA,CACA,aACA,CAEA,0CACA,iBACA,CAFA,8CACA,iBACA,CAFA,qCACA,iBACA,CAEA,iBACA,SAAA,CACA,iBAAA,CACA,kBACA,CAEA,eACA,YAAA,CACA,oBAAA,CACA,6BAAA,CACA,kBACA,CAEA,SACA,YACA,CAEA,cACA,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,kBACA,CAEA,kBACA,aAAA,CACA,eAAA,CACA,YACA,CAEA,qCACA,UACA,CAGA,2CACA,sBACA,CAGA,2CACA,kBACA,CAGA,iDACA,eACA,CAEA,kBACA,UAAA,CACA,eACA,CAEA,aACA,YAAA,CACA,uBAAA,CACA,0BACA,CAEA,gBACA,sBACA,CCjLA,qBACA,aAAA,CACA,qBAAA,CACA,ovIAAA,CAEA,UAAA,CACA,WAAA,CACA,+BACA,CAEA,+BACA,UAAA,CACA,WACA,CC0BA,iEACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,kBAAA,CACA,wBAAA,CAAA,qBAAA,CAAA,oBAAA,CAAA,gBACA,CAEA,6BACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,wBAAA,CACA,mBACA,CAEA,oEACA,aAAA,CACA,iBAAA,CAEA,UAAA,CACA,WACA,CAEA,4DACA,aAAA,CACA,iBAAA,CAEA,UAAA,CACA,WACA,CAEA,0EACA,UAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,iBAAA,CACA,ovIAAA,CACA,qBACA,CAEA,wCACA,sBACA,CAEA,qCACA,UACA,CAEA,sCACA,UACA,CAEA,oCACA,6BACA,WACA,CAEA,sCACA,UACA,CACA,CCVA,0BACA,WAAA,CACA,iBACA,CAEA,8BACA,iBAAA,CACA,OAAA,CACA,QAAA,CACA,8BAAA,CAEA,qBAAA,CACA,WAAA,CACA,4BAAA,CACA,oBAAA,CACA,gBAAA,CACA,YAAA,CACA,wBAAA,CAEA,eAAA,CACA,aACA,CAEA,iCACA,WAAA,CACA,iBAAA,CACA,2BACA,CAEA,4BACA,YAAA,CACA,oBAAA,CACA,0BAAA,CACA,kBAAA,CACA,kBACA,CAEA,6CACA,aAAA,CACA,gBAAA,CACA,iBACA,CAEA,6CACA,aAAA,CAEA,mBAAA,CACA,iBAAA,CACA,aAAA,CACA,eAAA,CACA,4BAAA,CACA,QAAA,CACA,uBAAA,CACA,gBACA,CAEA,6CACA,WAAA,CACA,aAAA,CACA,cAAA,CACA,gBAAA,CACA,QACA,CAEA,6BACA,aAAA,CACA,UAAA,CACA,YAAA,CACA,aAAA,CACA,kBAAA,CACA,2BAAA,CACA,oBAAA,CACA,wBAAA,CACA,kBACA,CAEA,mCACA,wBACA,CC0BA,UACA,WAAA,CACA,QAAA,CACA,qBACA,CAEA,KACA,WAAA,CAEA,YAAA,CACA,uBAAA,CACA,0BACA,CAEA,0BACA,WAAA,CAEA,cAAA,CACA,uBAAA,CACA,mBAAA,CACA,qBAAA,CACA,iBACA,CAEA,wBACA,gBAAA,CACA,8BAAA,CACA,aACA,CAEA,2CACA,SAAA,CACA,UACA,CAQA,mGACA,kBACA,CAGA,iDACA,kBACA,CAEA,sBACA,oBAAA,CACA,gBAAA,CACA,YAAA,CACA,wBAAA,CACA,aAAA,CAEA,WAAA,CACA,gBACA,CAEA,oBACA,WAAA,CACA,wBAAA,CAEA,YAAA,CACA,sBAAA,CACA,kBAAA,CACA,mBACA,CAEA,mBACA,aAAA,CACA,gBAAA,CACA,8BACA,CAEA,oCACA,KACA,YAAA,CACA,qCACA,CAEA,0BACA,2BACA,CAEA,wBACA,2BAAA,CACA,eACA,CAEA,sBACA,2BAAA,CACA,eACA,CAEA,oBACA,SAAA,CACA,2BAAA,CACA,4BACA,CAEA,mBACA,2BAAA,CACA,eACA,CACA","file":"index.801541b9.css","sourcesContent":["<template>\r\n  <div id=\"navigation-bar\">\r\n    <h1 id=\"navigation-bar-header\">\r\n      Don't Starve Together Farm Planner\r\n    </h1>\r\n    <div class=\"navigation-bar-divider\"></div>\r\n    <div id=\"navigation-bar-github\">\r\n      <a href=\"https://www.klei.com/games/dont-starve-together\">\r\n        <img src=\"../assets/navigationbar/dont-starve-together-logo.png\"/>\r\n      </a>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'NavigationBar',\r\n  data () {\r\n    return {}\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n#navigation-bar {\r\n  height: 100%;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n}\r\n\r\n#navigation-bar-header {\r\n  display: block;\r\n  letter-spacing: 2px;\r\n  color: #ddd;\r\n  text-shadow:\r\n    -1px -1px 0 #000,  \r\n    1px -1px 0 #000,\r\n    -1px 1px 0 #000,\r\n    1px 1px 0 #000;\r\n  font-size: 1em;\r\n}\r\n\r\n#navigation-bar-github img {\r\n  height: 45px;\r\n}\r\n\r\n#navigation-bar-github img:hover {\r\n  filter: drop-shadow(0px 0px 3px white);\r\n}\r\n\r\n.navigation-bar-divider {\r\n  flex: 1 0 30px;\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    class=\"plot\"\r\n    :class=\"glowOnActionHover\"\r\n    :style=\"border\"\r\n    @click=\"handleClick\">\r\n    <img\r\n      v-if=\"crop\"\r\n      :src=\"imgSrc\"\r\n      :style=\"customSize(crop)\"\r\n      :class=\"{'giant-glow': giant}\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport crops from '@/library/crops'\r\nimport field from '@/library/field'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'Plot',\r\n  props: [\r\n    'plotIndex',\r\n    'plotData',\r\n    'currentAction',\r\n    'currentSeason',\r\n    'actionDetails',\r\n    'nutrients'\r\n  ],\r\n  data () {\r\n    const family = {}\r\n    for (let crop in crops) {\r\n      family[crop] = 0\r\n    }\r\n\r\n    return {\r\n      border: {\r\n        borderTopWidth: this.plotData.x > 0 ? '1px' : '0px',\r\n        borderBottomWidth: this.plotData.x < 2 ? '1px' : '0px',\r\n        borderLeftWidth: this.plotData.y > 0 ? '1px' : '0px',\r\n        borderRightWidth: this.plotData.y < 2 ? '1px' : '0px'\r\n      },\r\n      crop: null,\r\n      family\r\n    }\r\n  },\r\n  methods: {\r\n    handleClick (event) {\r\n      let action;\r\n      switch (this.currentAction) {\r\n        case 'plant':\r\n          action = this.plant(event)\r\n          break\r\n        case 'destroy':\r\n          action = this.destroy(event)\r\n          break\r\n        case 'inspect':\r\n          return this.inspect(event)\r\n      }\r\n\r\n      if (action && action.revert) {\r\n        this.$emit('action', action)\r\n      }\r\n    },\r\n    plant () {\r\n      if (this.actionDetails && this.crop === null) {\r\n        const action = this.plantCrop(this.actionDetails)\r\n        return action\r\n      }\r\n      return {type: 'plant'}\r\n    },\r\n    plantCrop (crop) {\r\n      this.plotData.plant(crop)\r\n      this.crop = crop\r\n\r\n      this.plotData.family = this.family[this.crop]\r\n\r\n      this.$emit('plantCrop', this.crop, this.plotIndex)\r\n\r\n      const action = {\r\n        type: 'plantCrop',\r\n        revert: () => this.destroy()\r\n      }\r\n\r\n      return action\r\n    },\r\n    destroy () {\r\n      if (this.crop !== null) {\r\n        const crop = this.crop\r\n        this.plotData.destroy()\r\n        this.crop = null\r\n\r\n        this.plotData.family = null\r\n\r\n        this.$emit('destroyCrop', this.plotIndex)\r\n\r\n        return {\r\n          type: 'destroy',\r\n          revert: () => this.plantCrop(crop)\r\n        }\r\n      }\r\n      return {type: 'destroy'}\r\n    },\r\n    inspect (event) {\r\n      if (this.crop !== null) {\r\n        this.$emit(\r\n          'inspect',\r\n          this.plotData.inspectReport(\r\n            this.nutrients,\r\n            this.currentSeason\r\n          )\r\n        )\r\n\r\n        if (event) {\r\n          event.stopPropagation()\r\n        }\r\n      }\r\n    },\r\n    customSize (crop) {\r\n      const type = this.giant ? 'giant' : 'plant'\r\n      const basisCrop = field.cropBasis[type]\r\n      const basisWidth = crops[basisCrop].dimensions[type].x\r\n      const cropDimensions = crops[crop].dimensions[type]\r\n      const cropWidth = cropDimensions.x * cropDimensions.multiplier\r\n      const plotSize = field.plotSizePx\r\n\r\n      const width = cropWidth * plotSize / basisWidth\r\n\r\n      return {width: `${width}px`}\r\n    },\r\n    neighborUpdated (fromType, toType) {\r\n      if (fromType) {\r\n        this.family[fromType]--;\r\n      }\r\n      if (toType) {\r\n        this.family[toType]++;\r\n      }\r\n      if (this.crop) {\r\n        this.plotData.family = this.family[this.crop]\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    imgSrc () {\r\n      if (!this.crop) {\r\n        return ''\r\n      }\r\n\r\n      const type = this.giant ? 'giant' : 'plant'\r\n      return getResourcePath(crops[this.crop].src[type])\r\n    },\r\n    giant () {\r\n      if (!this.crop) {\r\n        return false\r\n      }\r\n\r\n      const seasonStress = !this.inSeason\r\n      const familyStress = !this.hasFamily\r\n      const nutrientStress = !this.nutrientBalance\r\n\r\n      return !(seasonStress || familyStress || nutrientStress)\r\n    },\r\n    nutrientBalance () {\r\n      return this.plotData.meetsNutrientRequirements(this.nutrients)\r\n    },\r\n    hasFamily () {\r\n      return this.plotData.hasFamily()\r\n    },\r\n    inSeason () {\r\n      return this.plotData.inSeason(this.currentSeason)\r\n    },\r\n    plantable () {\r\n      return this.currentAction === 'plant'\r\n        && this.crop === null\r\n        && this.actionDetails !== null\r\n    },\r\n    destroyable () {\r\n      return this.currentAction === 'destroy'\r\n        && this.crop !== null\r\n    },\r\n    inspectable () {\r\n      return this.currentAction === 'inspect'\r\n        && this.crop !== null\r\n    },\r\n    glowOnActionHover () {\r\n      return {\r\n        'plot-glow-white': this.inspectable,\r\n        'plot-glow-green': this.plantable,\r\n        'plot-glow-red': this.destroyable\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    currentSeason () {\r\n      if (this.currentAction === 'inspect') {\r\n        this.inspect()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.plot {\r\n  height: 100%;\r\n  border-style: dashed;\r\n  border-color: #231910;\r\n  box-sizing: border-box;\r\n  position: relative;\r\n}\r\n\r\n.plot img {\r\n  position: absolute;\r\n  bottom: 3px;\r\n  left: 50%;\r\n  transform: translate(-50%, 0%);\r\n  pointer-events: none;\r\n}\r\n\r\n.giant-glow {\r\n  filter: drop-shadow(0px 0px 2px #ccc)\r\n}\r\n\r\n.plot-glow-white:hover {\r\n  background-color: #cccccc70;\r\n}\r\n\r\n.plot-glow-red:hover {\r\n  background-color: #a7232370;\r\n}\r\n\r\n.plot-glow-green:hover {\r\n  background-color: #157515c0;\r\n}\r\n</style>","<template>\r\n  <div class=\"tile\" :class=\"{plotted}\" @click=\"clicked\">\r\n    <div class=\"plot-container\"\r\n      :class=\"glowOnActionHover\"\r\n      :style=\"plotGridStyle\">\r\n      <div\r\n        :style=\"showWhenPlotted\"\r\n        v-for=\"(plotData, index) in tileData.plotList\"\r\n        :key=\"index\">\r\n        <Plot\r\n          ref=\"plots\"\r\n          :plotIndex=\"index\"\r\n          :plotData=\"plotData\"\r\n          :currentAction=\"currentAction\"\r\n          :currentSeason=\"currentSeason\"\r\n          :actionDetails=\"actionDetails\"\r\n          :nutrients=\"nutrients\"\r\n          @plantCrop=\"cropPlanted\"\r\n          @destroyCrop=\"cropDestroyed\"\r\n          @inspect=\"inspect\"\r\n          @action=\"actionDone\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Plot from './Plot'\r\n\r\nimport field from '@/library/field'\r\nimport crops from '@/library/crops'\r\n\r\nconst {\r\n  plotSizePx,\r\n  plotColsPerTile,\r\n  plotRowsPerTile,\r\n  maxNeighborDistance\r\n} = field;\r\n\r\nexport default {\r\n  name: 'Tile',\r\n  components: {Plot},\r\n  props: [\r\n    'tileIndex',\r\n    'tileData',\r\n    'currentAction',\r\n    'currentSeason',\r\n    'actionDetails'\r\n  ],\r\n  data () {\r\n    return {\r\n      plotCropList: []\r\n    }\r\n  },\r\n  computed: {\r\n    plotGridStyle () {\r\n      const gridTemplateRows = `${plotSizePx}px `.repeat(plotRowsPerTile).trim()\r\n      const gridTemplateColumns = `${plotSizePx}px `.repeat(plotColsPerTile).trim()\r\n      return {\r\n        display: 'grid',\r\n        gridTemplateRows,\r\n        gridTemplateColumns\r\n      }\r\n    },\r\n    showWhenPlotted () {\r\n      return {\r\n        visibility: this.plotted ? 'visible' : 'hidden'\r\n      }\r\n    },\r\n    nutrients () {\r\n      return this.tileData.nutrients\r\n    },\r\n    plowable () {\r\n      return this.currentAction === 'plot' && !this.plotted\r\n    },\r\n    flattenable () {\r\n      return this.currentAction === 'flatten' && this.plotted\r\n    },\r\n    inspectable () {\r\n      return this.currentAction === 'inspect' && this.plotted\r\n    },\r\n    plotted () {\r\n      return this.tileData.plotted\r\n    },\r\n    glowOnActionHover () {\r\n      return {\r\n        'glow-red': this.flattenable,\r\n        'glow-green': this.plowable,\r\n        'glow-white': this.inspectable\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    clicked () {\r\n      let action;\r\n      if (this.plowable) {\r\n        action = this.plow()\r\n      }\r\n      else if (this.flattenable) {\r\n        action = this.destroy()\r\n      }\r\n      else if (this.inspectable) {\r\n        this.inspect(null)\r\n      }\r\n\r\n      if (action && action.revert) {\r\n        this.actionDone(action)\r\n      }\r\n    },\r\n    actionDone (action) {\r\n      this.$emit('action', action)\r\n    },\r\n    plow () {\r\n      this.tileData.plow()\r\n      this.plotCropList = []\r\n      return {\r\n        type: 'plowTile',\r\n        revert: () => this.destroy()\r\n      }\r\n    },\r\n    destroy () {\r\n      this.tileData.destroy()\r\n      const destroyActions = []\r\n      for (let plot of this.$refs.plots) {\r\n        if (plot.crop) {\r\n          const action = plot.destroy()\r\n          if (action && action.revert) {\r\n            destroyActions.push(action)\r\n          } \r\n        }          \r\n      }\r\n\r\n      return {\r\n        type: 'destroyTile',\r\n        revert: () => {\r\n          const action = this.plow()\r\n          destroyActions.forEach(e => e.revert())\r\n          return action\r\n        }\r\n      }\r\n    },\r\n    loadTileState (tileState) {\r\n      for (let plot of this.$refs.plots) {\r\n        const stringKey = `${plot.plotData.x},${plot.plotData.y}`\r\n\r\n        if (tileState[stringKey]) {\r\n          plot.plantCrop(tileState[stringKey])\r\n        }\r\n      }\r\n    },\r\n    inspect (plotDetail) {\r\n      this.$emit(\r\n        'inspect',\r\n        {\r\n          plotDetail,\r\n          tileDetail: this.tileData.inspectReport(this.currentSeason)\r\n        }\r\n      )\r\n    },\r\n    cropPlanted (cropType, index) {\r\n      this.addCropNutrients(cropType, 1)\r\n      this.plotCropList[index] = cropType\r\n\r\n      this.cropUpdated(index, null, cropType)\r\n    },\r\n    cropDestroyed (index) {\r\n      const cropType = this.plotCropList[index]\r\n      this.addCropNutrients(cropType, -1)\r\n\r\n      this.plotCropList[index] = null\r\n      this.cropUpdated(index, cropType, null)\r\n    },\r\n    addCropNutrients (cropType, sign = 1) {\r\n      const additiveSign = Math.sign(sign)\r\n      const cropNutrients = crops[cropType].nutrients\r\n      const growthSpeed = crops[cropType].seasons.includes(this.currentSeason)\r\n        ? field.growthSpeed.inSeason\r\n        : field.growthSpeed.offSeason\r\n\r\n      for (let nutrient in cropNutrients) {\r\n        this.tileData[nutrient] += (cropNutrients[nutrient] * growthSpeed * additiveSign)\r\n      }\r\n    },\r\n    cropUpdated (index, fromType, toType) {\r\n      for (let plot of this.$refs.plots) {\r\n        if (plot.plotIndex !== index) {\r\n          plot.neighborUpdated(fromType, toType)\r\n        }\r\n      }\r\n\r\n      this.emitChangeCropEvent(index, fromType, toType)\r\n    },\r\n    emitChangeCropEvent (index, fromType, toType) {\r\n      const coordinates = this.plotIndexToXY(index)\r\n      const eventBody = {\r\n        coordinates,\r\n        tile: this.tileIndex,\r\n        tileData: this.tileData,\r\n        from: fromType,\r\n        to: toType\r\n      }\r\n\r\n      this.$emit('changeCrop', eventBody)  \r\n    },\r\n    updateCropNeighbors (sourceCoordinates, fromType, toType) {\r\n      for (let plot of this.$refs.plots) {\r\n        const plotCoordinates = this.plotIndexToXY(plot.plotIndex)\r\n        const distance = this.getDistance(sourceCoordinates, plotCoordinates)\r\n        if (distance < maxNeighborDistance) {\r\n          plot.neighborUpdated(fromType, toType)\r\n        }\r\n      }\r\n    },\r\n    getDistance (positionA, positionB) {\r\n      const diffX = (positionA.x - positionB.x)\r\n      const diffY = (positionA.y - positionB.y)\r\n      return Math.sqrt((diffX * diffX) + (diffY * diffY))\r\n    },\r\n    plotIndexToInternalXY (index) {\r\n      return {\r\n        x: index % plotColsPerTile,\r\n        y: Math.floor(index / plotColsPerTile)\r\n      }\r\n    },\r\n    plotIndexToXY (index) {\r\n      const {x, y} = this.plotIndexToInternalXY(index)\r\n\r\n      return {\r\n        x: (this.tileData.x * plotColsPerTile) + x,\r\n        y: (this.tileData.y * plotRowsPerTile) + y\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    currentSeason () {\r\n      this.tileData.growthFormula = 0\r\n      this.tileData.compost = 0\r\n      this.tileData.manure = 0\r\n\r\n      for (let cropType of this.plotCropList) {\r\n        if (cropType) {\r\n          this.addCropNutrients(cropType, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.tile {\r\n  height: 100%;\r\n  border: 2px dashed #cccccc70;\r\n  box-sizing: border-box;\r\n  background-image: none;\r\n}\r\n\r\n.tile.plotted {\r\n  background-image: url(\"../../assets/canvas/Farm_Soil_Texture.png\");\r\n  background-size: 192px;\r\n  background-repeat: repeat;\r\n  border: 2px solid #231910;\r\n}\r\n\r\n.plot-container {\r\n  height: 100%;\r\n}\r\n\r\n.empty-plot {\r\n  pointer-events: none;\r\n}\r\n\r\n.glow-white:hover {\r\n  background-color: #cccccc20;\r\n}\r\n\r\n.glow-red:hover {\r\n  background-color: #a7232320;\r\n}\r\n\r\n.glow-green:hover {\r\n  background-color: #1575158e;\r\n}\r\n</style>\r\n","<template>\r\n  <div id=\"field-canvas\"\r\n    :style=\"fieldCanvasStyle\">\r\n    <div id=\"tiles-container\"\r\n      :style=\"tileGridStyle\">\r\n      <div\r\n        v-for=\"(tileData, index) in farmData.tileList\"\r\n        :key=\"index\">\r\n        <Tile\r\n          ref=\"tiles\"\r\n          :tileIndex=\"index\"\r\n          :tileData=\"tileData\"\r\n          :currentAction=\"currentAction\"\r\n          :currentSeason=\"currentSeason\"\r\n          :actionDetails=\"actionDetails\"\r\n          @changeCrop=\"updateAdjacentTiles\"\r\n          @inspect=\"inspect\"\r\n          @action=\"actionDone\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Tile from '@/components/FieldCanvas/Tile'\r\n\r\nimport FarmData from '@/library/FarmData'\r\nimport seasons from '@/library/seasons'\r\nimport field from '@/library/field'\r\n\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nconst tileWidthPx = field.plotColsPerTile * field.plotSizePx\r\nconst tileHeightPx = field.plotRowsPerTile * field.plotSizePx\r\n\r\nexport default {\r\n  name: 'FieldCanvas',\r\n  props: [\r\n    'currentAction',\r\n    'currentSeason',\r\n    'actionDetails',\r\n    'fieldState'\r\n  ],\r\n  components: {Tile},\r\n  data () {\r\n    return {\r\n      width: this.fieldState.width,\r\n      height: this.fieldState.height,\r\n      loaded: false,\r\n      farmData: new FarmData(this.fieldState.width, this.fieldState.height, this.currentSeason)\r\n    }\r\n  },\r\n  mounted () {\r\n    this.loadFieldState()\r\n  },\r\n  methods: {\r\n    updateAdjacentTiles (cropChangeDetails) {\r\n      const {\r\n        coordinates: sourceCoordinates,\r\n        tile: sourceTileIndex,\r\n        tileData: sourceTileData,\r\n        from: fromType,\r\n        to: toType\r\n      } = cropChangeDetails;\r\n\r\n      for (let tile of this.$refs.tiles) {\r\n        if (\r\n          sourceTileIndex !== tile.tileIndex &&\r\n          Math.abs(tile.tileData.x - sourceTileData.x) <= 1 &&\r\n          Math.abs(tile.tileData.y - sourceTileData.y) <= 1\r\n        ) {\r\n          tile.updateCropNeighbors(\r\n            sourceCoordinates,\r\n            fromType,\r\n            toType\r\n          )\r\n        }\r\n      }\r\n    },\r\n    toJSON () {\r\n      return this.farmData.toJSON()\r\n    },\r\n    loadFieldState () {\r\n      if (this.loaded) {\r\n        return\r\n      }\r\n\r\n      this.loaded = true\r\n\r\n      for (let tile of this.$refs.tiles) {\r\n        const stringKey = `${tile.tileData.x},${tile.tileData.y}`\r\n\r\n        if (this.fieldState.tiles[stringKey]) {\r\n          tile.plow()\r\n          tile.loadTileState(this.fieldState.tiles[stringKey])\r\n        }\r\n      }\r\n    },\r\n    inspect ({plotDetail, tileDetail}) {\r\n      this.$emit(\r\n        'inspect',\r\n        {\r\n          plotDetail,\r\n          tileDetail\r\n        }\r\n      )\r\n    },\r\n    actionDone (action) {\r\n      this.$emit('action', action)\r\n    }\r\n  },\r\n  computed: {\r\n    fieldCanvasStyle () {\r\n      const turfPath = getResourcePath(seasons[this.currentSeason].turf)\r\n      return {\r\n        backgroundImage: `url(${turfPath})`,\r\n        height: `${(tileHeightPx * this.height) + 80}px`,\r\n        width: `${(tileWidthPx * this.width) + 80}px`\r\n      }\r\n    },\r\n    tileGridStyle () {\r\n      const gridTemplateRows = `${tileHeightPx}px `.repeat(this.height).trim()\r\n      const gridTemplateColumns = `${tileWidthPx}px `.repeat(this.width).trim()\r\n      return {\r\n        gridTemplateRows,\r\n        gridTemplateColumns\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n#field-canvas {\r\n  background-size: 768px;\r\n  background-repeat: repeat;\r\n  transition: background-image 0.5s ease-in-out;\r\n  position: relative;\r\n  min-height: 100%;\r\n  min-width: 100%;\r\n}\r\n\r\n#tiles-container {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  display: grid;\r\n}\r\n\r\n@media screen and (min-width: 780px) {\r\n    #field-canvas {\r\n      height: 100%;\r\n      overflow: hidden;\r\n      padding: 0px;\r\n    }\r\n\r\n    #tiles-container {\r\n      margin: 0px;\r\n    }\r\n  }\r\n</style>\r\n","<template>\r\n  <img\r\n    class=\"season-switch brown-icon\"\r\n    :class=\"{ 'selected-season': this.selected }\"\r\n    :src=\"imgSrc\"\r\n    @click=\"triggerEvent\"/>\r\n</template>\r\n\r\n<script>\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'SeasonSwitch',\r\n  props: ['config', 'selected'],\r\n  data () {\r\n    return {\r\n      imgSrc: getResourcePath(this.config.symbol)\r\n    }\r\n  },\r\n  methods: {\r\n    triggerEvent () {\r\n      this.$emit(\r\n        'clicked',\r\n        this.config.season\r\n      )\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.season-switch {\r\n  display: inline;\r\n\r\n  width: 1em;\r\n  margin-left: 10px;\r\n  padding: 3px;\r\n}\r\n\r\n.season-switch:hover {\r\n  filter: drop-shadow(0px 0px 4px #ccc);\r\n}\r\n\r\n.selected-season { \r\n  filter: invert(100%) sepia(3%) saturate(575%) hue-rotate(244deg) brightness(115%) contrast(87%);\r\n}\r\n\r\n.selected-season:hover { \r\n  filter: invert(100%) sepia(3%) saturate(575%) hue-rotate(244deg) brightness(115%) contrast(87%) drop-shadow(0px 0px 4px #ccc);;\r\n}\r\n</style>\r\n","<template>\r\n  <div \r\n    class=\"crop-row\" \r\n    :class=\"{'selected-crop': selected}\"\r\n    @click=\"triggerEvent\">\r\n    <div class=\"crop-row-layout\">\r\n      <div class=\"crop-header\">\r\n        <img :src=\"imgSrc\" class=\"crop-image\"/>\r\n        <img :src=\"seedImgSrc\" class=\"crop-image\"/>\r\n        <div class=\"crop-name\">\r\n          {{config.name}}\r\n        </div>\r\n      </div>\r\n      <div class=\"crop-nutrients\">\r\n        <div\r\n          v-for=\"(nutrient, index) in nutrients\"\r\n          :key=\"index\">\r\n          <img\r\n            :src=\"getResourcePath(nutrient.imgSrc)\"\r\n            class=\"brown-icon\"/> : {{config.nutrients[index]}}\r\n        </div>\r\n      </div>\r\n      <div class=\"crop-seasons\">\r\n        <img\r\n          v-for=\"(season, index) in seasons\"\r\n          :key=\"index\"\r\n          :src=\"getResourcePath(season.symbol)\"\r\n          class=\"brown-icon\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport nutrients from '@/library/nutrients'\r\nimport seasons from '@/library/seasons'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\n\r\nexport default {\r\n  name: 'CropRow',\r\n  props: ['config', 'selected'],\r\n  data () {\r\n    return {\r\n      imgSrc: getResourcePath(this.config.src.normal),\r\n      seedImgSrc: getResourcePath(this.config.src.seeds),\r\n      seasons: this.config.seasons.map(x => seasons[x]),\r\n      nutrients\r\n    }\r\n  },\r\n  methods: {\r\n    getResourcePath,\r\n    triggerEvent () {\r\n      this.$emit('click', this.selected ? null : this.config.crop)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.crop-row {\r\n  margin-bottom: 10px;\r\n  border-left: 5px solid #342517;\r\n  padding: 5px;\r\n  user-select: none;\r\n}\r\n\r\n.crop-row:hover {\r\n  background-color: #cccccc88\r\n}\r\n\r\n.crop-row.selected-crop {\r\n  border-left: 5px solid #ccc;\r\n}\r\n\r\n.crop-image {\r\n  height: 1.2em;\r\n  width: 1.2em;\r\n  background-image: url(\"../../../assets/toolbar/tool_bg.png\");\r\n  background-size: contain;\r\n}\r\n\r\n.crop-seasons img {\r\n  height: 1em;\r\n}\r\n\r\n.crop-nutrients {\r\n  font-size: 0.8em;\r\n}\r\n\r\n.crop-nutrients img {\r\n  height: 1em;\r\n}\r\n\r\n.crop-header {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.crop-header .crop-image {\r\n  margin-right: 10px;\r\n}\r\n\r\n.crop-nutrients {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.crop-nutrients div {\r\n  margin-left: 10px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.crop-seasons {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.crop-seasons img {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n}\r\n</style>","<template>\r\n  <div \r\n    class=\"season-filter filter\"\r\n    :class=\"{'selected-filter': filter}\"\r\n    @click=\"triggerEvent\">\r\n    <img\r\n      class=\"filter brown-icon\"\r\n      :src=\"imgSrc\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'SeasonFilter',\r\n  props: ['config'],\r\n  data () {\r\n    return {\r\n      imgSrc: getResourcePath(this.config.symbol),\r\n      filter: false\r\n    }\r\n  },\r\n  methods: {\r\n    triggerEvent () {\r\n      this.filter = !this.filter\r\n      this.$emit(\r\n        'click',\r\n        {\r\n          season: this.config.season,\r\n          filter: this.filter\r\n        }\r\n      )\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n.season-filter img {\r\n  height: 1em;\r\n}\r\n</style>\r\n","<template>\r\n  <div \r\n    class=\"nutrient-filter filter\"\r\n    :class=\"selectedFilter\"\r\n    @click=\"toggleNutrientFilter()\">\r\n    <img\r\n      :src=\"getResourcePath(config.imgSrc)\"\r\n      class=\"label brown-icon\"/>\r\n    <img \r\n      :src=\"getResourcePath(intakeSrc)\"\r\n      class=\"filter brown-icon\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'NutrientFilter',\r\n  props: ['config'],\r\n  data () {\r\n    return {\r\n      filter: null,\r\n    }\r\n  },\r\n  methods: {\r\n    getResourcePath,\r\n    toggleNutrientFilter () {\r\n      if (this.filter === null) {\r\n        this.filter = '+';\r\n      }\r\n      else if (this.filter === '+') {\r\n        this.filter = '-';\r\n      }\r\n      else {\r\n        this.filter = null;\r\n      }\r\n\r\n      this.$emit(\r\n        'click',\r\n        {\r\n          nutrient: this.config.nutrient,\r\n          filter: this.filter\r\n        }\r\n      )\r\n    }\r\n  },\r\n  computed: {\r\n    selectedFilter () {\r\n      return {\r\n        'selected-filter': this.filter !== null\r\n      }\r\n    },\r\n    intakeSrc () {\r\n      switch (this.filter) {\r\n        case '+':\r\n          return 'nutrients/nutrient-one-down.png'\r\n        case '-':\r\n          return 'nutrients/nutrient-one-up.png'\r\n        default:\r\n          return 'nutrients/nutrient-neutral.png'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.nutrient-filter {  \r\n  display: grid;\r\n  grid-template: 1em / 1em 1em;\r\n}\r\n\r\n.nutrient-filter img.label {\r\n  height: 100%;\r\n  grid-area: 1 / 1 / span 1 / span 1;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.nutrient-filter img.filter {\r\n  grid-area: 1 / 2 / span 1 / span 1;\r\n  height: 100%;\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n}\r\n</style>","<template>\r\n  <div id=\"crop-selector\" class=\"column-flex remaining-height\">\r\n    <div class=\"section-header\">\r\n      Plant Crops\r\n    </div>\r\n    <div id=\"crop-filters\">\r\n      <div id=\"crop-nutrient-filters\">\r\n        <NutrientFilter\r\n          v-for=\"(nutrient, index) in nutrients\"\r\n          :key=\"index\"\r\n          :config=\"nutrient\"\r\n          @click=\"setNutrientFilter\"\r\n          />\r\n      </div>\r\n      <div id=\"crop-season-filters\">\r\n        <SeasonFilter\r\n          v-for=\"(season, index) in seasons\"\r\n          :key=\"index\"\r\n          :config=\"season\"\r\n          @click=\"seasonClicked\"/>\r\n      </div>\r\n    </div>\r\n    <div id=\"crop-list\" class=\"column-flex remaining-height\">\r\n      <CropRow\r\n        v-for=\"(config, index) in crops\"\r\n        :key=\"index\"\r\n        :selected=\"isCropSelected(config.crop)\"\r\n        :config=\"config\"\r\n        @click=\"cropClicked\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CropRow from './CropSelector/CropRow'\r\nimport SeasonFilter from './CropSelector/SeasonFilter'\r\nimport NutrientFilter from './CropSelector/NutrientFilter'\r\n\r\nimport nutrients from '@/library/nutrients'\r\nimport seasons from '@/library/seasons'\r\nimport crops from '@/library/crops'\r\n \r\nexport default {\r\n  name: 'CropSelector',\r\n  props: ['currentAction', 'actionDetails'],\r\n  components: {NutrientFilter, SeasonFilter, CropRow},\r\n  data () {\r\n    return {\r\n      filters: {\r\n        seasons: {},\r\n        nutrients: {}\r\n      },\r\n      nutrients,\r\n      seasons,\r\n      crops\r\n    }\r\n  },\r\n  methods: {\r\n    cropClicked (actionDetails) {\r\n      if (this.actionDetails !== actionDetails) {\r\n        this.$emit('setActionDetails', actionDetails)\r\n      }\r\n    },\r\n    setNutrientFilter ({nutrient, filter}) {\r\n      this.filters.nutrients[nutrient] = filter\r\n      this.crops = this.filterCrops()\r\n    },\r\n    isSeasonSelected (season) {\r\n      return !!this.filters.seasons[season]\r\n    },\r\n    seasonClicked ({season, filter}) {\r\n      this.filters.seasons[season] = filter\r\n      this.crops = this.filterCrops()\r\n    },\r\n    isCropSelected (crop) {\r\n      return this.actionDetails === crop\r\n    },\r\n    filterCrops () {\r\n      const filteredCrops = {}\r\n\r\n      for (let cropKey in crops) {\r\n        const cropConfig = crops[cropKey]\r\n        let include = true\r\n\r\n        for (let season in this.filters.seasons) {\r\n          const requiredSeason = !!this.filters.seasons[season]\r\n          if (requiredSeason && !cropConfig.seasons.includes(season)) {\r\n            include = false\r\n            break\r\n          }\r\n        }\r\n\r\n        for (let nutrient in this.filters.nutrients) {\r\n          const nutrientIntake = this.filters.nutrients[nutrient]\r\n          const failPositive = (nutrientIntake === '+' && cropConfig.nutrients[nutrient] < 0)\r\n          const failNegative = (nutrientIntake === '-' && cropConfig.nutrients[nutrient] > 0)\r\n          if (failPositive || failNegative) {\r\n            include = false\r\n            break\r\n          }\r\n        }\r\n\r\n        if (include) {\r\n          filteredCrops[cropKey] = cropConfig\r\n        }\r\n      }\r\n\r\n      return filteredCrops\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#crop-filter {\r\n  padding-top: 15px;\r\n  padding-bottom: 15px;\r\n}\r\n\r\n#crop-nutrient-filters, #crop-season-filters {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  padding: 15px;\r\n  padding: 15px;\r\n}\r\n\r\n.filter:hover img {\r\n  filter: drop-shadow(0px 0px 4px #ccc);\r\n}\r\n\r\n.selected-filter img { \r\n  filter: invert(100%) sepia(3%) saturate(575%) hue-rotate(244deg) brightness(115%) contrast(87%);\r\n}\r\n\r\n.selected-filter:hover img { \r\n  filter: invert(100%) sepia(3%) saturate(575%) hue-rotate(244deg) brightness(115%) contrast(87%) drop-shadow(0px 0px 4px #ccc);;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"nutrient-list\">\r\n    <div class=\"nutrient-count\"\r\n      v-for=\"(count, nutrient) in nutrients\"\r\n      :key=\"nutrient\">\r\n      <img :src=\"imgSrc(nutrient)\" class=\"brown-icon\"/>\r\n      : {{count}}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport nutrients from '@/library/nutrients'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'NutrientList',\r\n  props: ['nutrients'],\r\n  data () {\r\n    return {}\r\n  },\r\n  methods: {\r\n    imgSrc (nutrient) {\r\n      return getResourcePath(nutrients[nutrient].imgSrc)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.nutrient-list {\r\n  font-size: 0.8em;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n\r\n.nutrient-count img {\r\n  display: inline-block;\r\n  height: 1em; \r\n}\r\n</style>","<template>\r\n  <div class=\"yield-list\">\r\n    <div class=\"yield-count\"\r\n      v-for=\"(yieldCount, index) in yieldList\"\r\n      :key=\"index\">\r\n      <img class=\"yield-img\" :src=\"yieldCount.imgSrc\"/>\r\n      x {{yieldCount.count}}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport crops from '@/library/crops'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'YieldList',\r\n  props: ['yields'],\r\n  data () {\r\n    return {}\r\n  },\r\n  computed: {\r\n    yieldList () {\r\n      const yieldList = []\r\n\r\n      for (let crop in this.yields) {\r\n        yieldList.push({\r\n          imgSrc: getResourcePath(crops[crop].src.normal),\r\n          count: this.yields[crop].crop\r\n        })\r\n\r\n        yieldList.push({\r\n          imgSrc: getResourcePath(crops[crop].src.seeds),\r\n          count: this.yields[crop].seed\r\n        })\r\n      }\r\n\r\n      return yieldList\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.yield-list {\r\n  font-size: 0.8em;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  align-content: flex-start;\r\n}\r\n\r\n.yield-count {\r\n  margin-right: 15px;\r\n}\r\n\r\n.yield-count img {\r\n  display: inline-block;\r\n  height: 1em; \r\n}\r\n</style>","<template>\r\n  <div class=\"seed-list\">\r\n    <div class=\"seed-count\"\r\n      v-for=\"(count, crop) in seeds\"\r\n      :key=\"crop\">\r\n      <img class=\"seed-img\" :src=\"src(crop, 'seeds')\"/>\r\n      <img class=\"crop-img\" :src=\"src(crop, 'normal')\"/>\r\n      x {{count}}\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport crops from '@/library/crops'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'SeedList',\r\n  props: ['seeds'],\r\n  data () {\r\n    return {}\r\n  },\r\n  methods: {\r\n    src (crop, type) {\r\n      return getResourcePath(crops[crop].src[type])\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.seed-list {\r\n  font-size: 0.8em;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  align-content: flex-start;\r\n}\r\n\r\n.seed-count {\r\n  margin-right: 15px;\r\n}\r\n\r\n.seed-count img {\r\n  display: inline-block;\r\n  height: 1em; \r\n}\r\n\r\n.seed-count .crop-img {\r\n  margin-left: -5px;\r\n}\r\n</style>","<template>\r\n  <div id=\"inspector\" class=\"column-flex remaining-height\">\r\n    <div class=\"section-header\">\r\n      Inspect Farm\r\n    </div>\r\n\r\n    <div id=\"inspect-farm\">\r\n      <div class=\"subsection-header\">\r\n        Farm Stats\r\n      </div>\r\n      <div class=\"detail-label\">\r\n        Total Seeds Needed:\r\n      </div>\r\n      <SeedList\r\n        v-if=\"nonEmptyObject(farmDetail.seeds)\"\r\n        :seeds=\"farmDetail.seeds\"/>\r\n      <div v-else class=\"no-data\">none</div>\r\n      <div class=\"detail-label\">\r\n        Total Farm Yield: \r\n      </div>\r\n      <YieldList\r\n        v-if=\"nonEmptyObject(farmDetail.yield)\"\r\n        :yields=\"farmDetail.yield\"/>\r\n      <div v-else class=\"no-data\">none</div>\r\n    </div>\r\n\r\n    <hr class=\"section-divider\" v-if=\"tileDetail\"/>\r\n\r\n    <div id=\"inspect-tile\" v-if=\"tileDetail\">\r\n      <div class=\"subsection-header\">\r\n        Tile Stats\r\n      </div>\r\n      <div class=\"detail-label\">\r\n        Ground Nutrient:\r\n      </div>\r\n      <NutrientList :nutrients=\"tileDetail.nutrients\"/>\r\n      <div class=\"detail-label\">\r\n        Seeds Needed:\r\n      </div>\r\n      <SeedList\r\n        v-if=\"nonEmptyObject(tileDetail.seeds)\"\r\n        :seeds=\"tileDetail.seeds\"/>\r\n      <div v-else class=\"no-data\">none</div>\r\n      <div class=\"detail-label\">\r\n        Tile Yield:\r\n      </div>\r\n      <YieldList\r\n        v-if=\"nonEmptyObject(tileDetail.yield)\"\r\n        :yields=\"tileDetail.yield\"/>\r\n      <div v-else class=\"no-data\">none</div>\r\n    </div>\r\n\r\n    <hr class=\"section-divider\" v-if=\"plotDetail\"/>\r\n\r\n    <div id=\"inspect-plot\" v-if=\"plotDetail\">\r\n      <div class=\"subsection-header\">\r\n        Plot Status\r\n      </div>\r\n      <div class=\"detail-label\">\r\n        Crop Planted:\r\n        <img :src=\"getCropImgSrc(plotDetail.crop, 'normal')\"/>\r\n        <img :src=\"getCropImgSrc(plotDetail.crop, 'seeds')\" style=\"margin-left: -10px;\"/>\r\n        {{getCropName(plotDetail.crop)}}\r\n      </div>\r\n      <div class=\"detail-label\">\r\n        Nutrient Requirements:\r\n      </div>\r\n      <NutrientList :nutrients=\"plotDetail.nutrientRequirements\"/>\r\n      <div class=\"detail-label\">\r\n        Crop Yield:\r\n      </div>\r\n      <YieldList :yields=\"{[plotDetail.crop]: plotDetail.yield}\"/>\r\n      <div class=\"detail-label\">\r\n        Stress Factors:\r\n      </div>\r\n      <ul class=\"stress-factors\">\r\n        <li v-if=\"cropInSeason\">\r\n          Favors the current season\r\n        </li>\r\n        <li class=\"stress-fail\" v-else>\r\n          Out of season\r\n          (this crop favors the seasons: {{cropFavoredSeasons.join(', ')}})\r\n        </li>\r\n        <li v-if=\"cropHasFamily\">\r\n          Has enough nearby family\r\n        </li>\r\n        <li class=\"stress-fail\" v-else>\r\n          Does not have enough nearby family\r\n          (needs {{requiredFamily - plotDetail.family}} more nearby family)\r\n        </li>\r\n        <li v-if=\"cropMeetsNutrients\">\r\n          Meets all required ground nutrients\r\n        </li>\r\n        <li class=\"stress-fail\" v-else>\r\n          Does not meet all required ground nutrients\r\n          (check the ground nutrients of the tile)\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport NutrientList from './Inspector/NutrientList'\r\nimport YieldList from './Inspector/YieldList'\r\nimport SeedList from './Inspector/SeedList'\r\n\r\nimport crops from '@/library/crops'\r\nimport field from '@/library/field'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'Inspector',\r\n  props: [\r\n    'farmDetail',\r\n    'tileDetail',\r\n    'plotDetail',\r\n    'season'\r\n  ],\r\n  components: {\r\n    NutrientList,\r\n    YieldList,\r\n    SeedList\r\n  },\r\n  data () {\r\n    return {}\r\n  },\r\n  methods: {\r\n    nonEmptyObject (obj) {\r\n      return obj && Object.keys(obj).length > 0\r\n    },\r\n    getCropImgSrc (crop, type) {\r\n      const path = crops[crop].src[type]\r\n      return  getResourcePath(crops[crop].src[type])\r\n    },\r\n    getCropName (crop) {\r\n      return crops[crop].name\r\n    }\r\n  },\r\n  computed: {\r\n    cropInSeason () {\r\n      return this.plotDetail.inSeason\r\n    },\r\n    cropHasFamily () {\r\n      return this.plotDetail.hasFamily\r\n    },\r\n    cropMeetsNutrients () {\r\n      return this.plotDetail.meetsNutrientRequirements\r\n    },\r\n    cropFavoredSeasons () {\r\n      return crops[this.plotDetail.crop].seasons\r\n    },\r\n    requiredFamily () {\r\n      return field.minimumFamily\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.subsection-header {\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.detail-label {\r\n  font-size: 0.8em;\r\n}\r\n\r\n.no-data {\r\n  font-size: 0.8em;\r\n  margin-left: 10px;\r\n}\r\n\r\n.detail-label img {\r\n  display: inline-block;\r\n  height: 1em;\r\n}\r\n\r\n.stress-factors {\r\n  font-size: 0.8em;\r\n  margin: 0px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.stress-fail {\r\n  color: rgb(83, 13, 13);\r\n}\r\n</style>","<template>\r\n  <div \r\n    class=\"save-slot\"\r\n    :class=\"{'selected-slot': selected}\" @click=\"emitClick\">\r\n    <div class=\"save-details\">\r\n      <img class=\"save-icon brown-icon\" :src=\"imgSrc\" />\r\n      <div class=\"save-name\">{{name || 'Unnamed Save'}}</div>\r\n    </div>\r\n    <div class=\"save-footer\">\r\n      <div class=\"save-time\">{{timeString}}</div>\r\n      <div \r\n        v-if=\"deletable\"\r\n        class=\"save-delete\"\r\n        @click.stop=\"deleteSave\">\r\n        Delete\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport seasons from '@/library/seasons'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'SaveSlot',\r\n  props: ['selected', 'name', 'season', 'time', 'deletable'],\r\n  data () {\r\n    return {}\r\n  },\r\n  methods: {\r\n    emitClick () {\r\n      this.$emit('click')\r\n    },\r\n    deleteSave () {\r\n      this.$emit('delete')\r\n    }\r\n  },\r\n  computed: {\r\n    imgSrc () {\r\n      return getResourcePath(seasons[this.season].symbol)\r\n    },\r\n    timeString () {\r\n      return new Date(this.time).toLocaleString()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.save-details {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n}\r\n\r\n.save-details .save-icon {\r\n  height: 1.2em;\r\n  width: 1.2em;\r\n  margin-right: 10px;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.save-details .save-name {\r\n  font-size: 0.8em;\r\n  flex-grow: 1;\r\n  min-height: 100%;\r\n}\r\n\r\n.save-footer {\r\n  font-size: 0.5em;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n}\r\n\r\n.save-footer .save-time {\r\n  flex-grow: 1;\r\n}\r\n\r\n.save-footer .save-delete {\r\n  color: rgb(83, 13, 13);\r\n}\r\n\r\n.save-footer .save-delete:hover {\r\n  color: rgb(136, 22, 22);\r\n}\r\n</style>","<template>\r\n  <div id=\"exporter\" class=\"column-flex remaining-height\">\r\n    <div class=\"section-header\">\r\n      Export\r\n    </div>\r\n    <div id=\"file-export\">\r\n      <label id=\"file-export-label\">\r\n        Export as JSON File\r\n      </label>\r\n      <button\r\n        type=\"button\"\r\n        @click=\"downloadFieldState\">\r\n        Download\r\n      </button>\r\n      \r\n    </div>\r\n\r\n    <hr class=\"section-divider\"/>\r\n\r\n    <div class=\"section-header\">\r\n      Save in Browser\r\n    </div>\r\n\r\n    <div id=\"local-save\" class=\"column-flex remaining-height\">\r\n      <div id=\"save-slot-list\" class=\"column-flex remaining-height\">\r\n        <SaveSlot\r\n          v-for=\"summary in saveSummaries\"\r\n          :key=\"summary.index\"\r\n          :selected=\"selectedSlot === summary.index\"\r\n          :name=\"summary.name\"\r\n          :season=\"summary.season\"\r\n          :time=\"summary.time\"\r\n          :deletable=\"true\"\r\n          @click=\"selectSlot(summary.index)\"\r\n          @delete=\"deleteSave(summary)\"\r\n          />\r\n        <div id=\"new-save-slot\" \r\n          :class=\"{'selected-slot': selectedSlot === 'new'}\"\r\n          @click=\"selectSlot('new')\">\r\n          + New Save\r\n        </div>\r\n      </div>\r\n      <button\r\n        :disabled=\"!selectedSlot\"\r\n        type=\"button\"\r\n        @click=\"saveState\">\r\n        Save\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SaveSlot from './Exporter/SaveSlot'\r\nimport {saveJSON, fetchJSON, keys} from '@/library/storage'\r\n\r\nexport default {\r\n  name: 'Exporter',\r\n  props: ['fieldState', 'currentSeason', 'farmName'],\r\n  components: {SaveSlot},\r\n  data () {\r\n    const {summaries, lastIndex} = fetchJSON(keys.saveSummary, {})\r\n    return {\r\n      selectedSlot: null,\r\n      saveSummaries: (summaries || []).filter(e => e),\r\n      lastIndex: lastIndex || 0\r\n    }\r\n  },\r\n  methods: {\r\n    downloadFieldState () {\r\n      const fieldStateString = JSON.stringify(this.fieldState)\r\n      const blob = new Blob([fieldStateString], {type: 'application/json'})\r\n      const url = URL.createObjectURL(blob)\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = `${this.farmName}.json`\r\n      document.body.appendChild(a)\r\n      a.click()\r\n      setTimeout(\r\n        () => {\r\n          document.body.removeChild(a);\r\n          window.URL.revokeObjectURL(url);  \r\n        },\r\n        0\r\n      )\r\n    },\r\n    selectSlot (slotIndex) {\r\n      if (slotIndex === this.selectedSlot) {\r\n        this.selectedSlot = null\r\n        return\r\n      }\r\n\r\n      this.selectedSlot = slotIndex\r\n    },\r\n    storeSummary () {\r\n      const summary = {\r\n          name: this.farmName,\r\n          season: this.currentSeason,\r\n          index: this.selectedSlot,\r\n          time: new Date().getTime()\r\n      }\r\n      const {summaries} = fetchJSON(keys.saveSummary, {})\r\n      const filteredSummaries = (summaries || []).filter(e => e)\r\n\r\n      let saved = false\r\n      for (let listIndex in filteredSummaries) {\r\n        if (this.selectedSlot === filteredSummaries[listIndex].index) {\r\n          filteredSummaries[listIndex] = summary\r\n          saved = true\r\n        }\r\n      }\r\n\r\n      if (!saved) {\r\n        filteredSummaries.push(summary)\r\n      }\r\n\r\n      saveJSON(\r\n        keys.saveSummary,\r\n        {\r\n          summaries: filteredSummaries,\r\n          lastIndex: this.lastIndex\r\n        }\r\n      )\r\n\r\n      this.saveSummaries = filteredSummaries\r\n    },\r\n    saveState () {\r\n      if (this.selectedSlot === 'new') {\r\n        this.lastIndex++\r\n        this.selectedSlot = this.lastIndex\r\n      }\r\n      \r\n      const saveData = {\r\n        index: this.selectedSlot,\r\n        data: this.fieldState\r\n      }\r\n\r\n      const saves = fetchJSON(keys.saveData, {})\r\n      saves[this.selectedSlot] = saveData\r\n      saveJSON(keys.saveData, saves)\r\n      this.storeSummary()\r\n    },\r\n    deleteSave (summary) {\r\n      const saveName = summary.name\r\n      const saveIndex = summary.index\r\n      if (this.selectedSlot === saveIndex) {\r\n        this.selectedSlot = null\r\n      }\r\n\r\n      const continueDelete = confirm(\r\n        `Are you sure you want to delete your save \"${saveName}\"?`\r\n      )\r\n\r\n      if (!continueDelete) {\r\n        return\r\n      }\r\n\r\n      for (let listIndex in this.saveSummaries) {\r\n        if (saveIndex === this.saveSummaries[listIndex].index) {\r\n          this.saveSummaries.splice(listIndex, 1)\r\n          break\r\n        }\r\n      }\r\n\r\n      saveJSON(\r\n        keys.saveSummary,\r\n        {\r\n          summaries: this.saveSummaries,\r\n          lastIndex: this.lastIndex\r\n        }\r\n      )\r\n\r\n      const saves = fetchJSON(keys.saveData, {})\r\n      delete saves[saveIndex]\r\n      saveJSON(keys.saveData, saves)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#file-export {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  font-size: 0.8em;\r\n}\r\n\r\n#file-export-label {\r\n  display: block;\r\n  margin-bottom: 10px;\r\n}\r\n\r\nbutton {\r\n  display: block;\r\n  padding: 5px;\r\n  font-size: 1em;\r\n  width: 100%;\r\n  font-weight: bolder;\r\n  font-family: belisa_plumilla;\r\n  border-color: #48321f;\r\n  background-color: #caa76a;\r\n}\r\n\r\nbutton:not([disabled]):hover {\r\n  background-color: #efc67f;\r\n}\r\n\r\n#save-slot-list {\r\n  flex-grow: 1;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n#save-slot-list > div {\r\n  margin-bottom: 10px;\r\n  border-left: 5px solid #342517;\r\n  padding: 5px;\r\n  padding-left: 10px;\r\n  user-select: none;\r\n}\r\n\r\n#save-slot-list > div:hover {\r\n  background-color: #cccccc88;\r\n}\r\n\r\n#save-slot-list > div.selected-slot {\r\n  border-left: 5px solid #ccc;\r\n}\r\n\r\n#local-save button {\r\n  flex-grow: 0;\r\n}\r\n</style>","<template>\r\n  <div id=\"importer\" class=\"column-flex remaining-height\">\r\n    <div class=\"section-header\">\r\n      Import\r\n    </div>\r\n    <div id=\"file-import\">\r\n      <div id=\"file-import-label\">\r\n        Import a JSON File\r\n      </div>\r\n      <label\r\n        for=\"file-upload\"\r\n        id=\"file-import-button\">\r\n        Upload\r\n      </label>\r\n      <input id=\"file-upload\"\r\n        type=\"file\"\r\n        accept=\"application/JSON\"\r\n        @change=\"uploadFieldState\"/>\r\n    </div>\r\n\r\n    <hr class=\"section-divider\"/>\r\n\r\n    <div class=\"section-header\">\r\n      Load from Browser\r\n    </div>\r\n\r\n    <div id=\"local-load\" class=\"column-flex remaining-height\">\r\n      <div id=\"load-slot-list\" class=\"column-flex remaining-height\">\r\n        <SaveSlot\r\n          v-for=\"summary in saveSummaries\"\r\n          :key=\"summary.index\"\r\n          :selected=\"selectedSlot === summary.index\"\r\n          :name=\"summary.name\"\r\n          :season=\"summary.season\"\r\n          :time=\"summary.time\"\r\n          :deletable=\"false\"\r\n          @click=\"selectSlot(summary.index)\"\r\n          />\r\n      </div>\r\n      <button\r\n        :disabled=\"!selectedSlot\"\r\n        type=\"button\"\r\n        @click=\"loadSavedState\">\r\n        Load\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SaveSlot from './Exporter/SaveSlot'\r\nimport {fetchJSON, keys} from '@/library/storage'\r\nimport {verifyFieldState} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'Importer',\r\n  props: ['fieldState', 'currentSeason', 'farmName'],\r\n  components: {SaveSlot},\r\n  data () {\r\n    const {summaries} = fetchJSON(keys.saveSummary, {})\r\n    return {\r\n      selectedSlot: null,\r\n      saveSummaries: (summaries || []).filter(e => e)\r\n    }\r\n  },\r\n  methods: {\r\n    uploadFieldState (uploadEvent) {\r\n      const [file] = uploadEvent.target.files\r\n      const reader = new FileReader()\r\n      reader.onload = () => {\r\n        const raw = reader.result\r\n        let formatted\r\n\r\n        try {\r\n          formatted = JSON.parse(raw)\r\n          if (!verifyFieldState(formatted)) {\r\n            throw new Error('Invalid savefile format')\r\n          }\r\n        }\r\n        catch (e) {\r\n          alert('Imported file is invalid')\r\n          console.error(e)\r\n          return\r\n        }\r\n\r\n        this.loadState(formatted, null)\r\n      }\r\n\r\n      if (file) {\r\n        reader.readAsText(file)\r\n      }\r\n    },\r\n    selectSlot (slotIndex) {\r\n      if (slotIndex === this.selectedSlot) {\r\n        this.selectedSlot = null\r\n        return\r\n      }\r\n\r\n      this.selectedSlot = slotIndex\r\n    },\r\n    fetchSaveSummary () {\r\n      for (let listIndex in this.saveSummaries) {\r\n        if (this.selectedSlot === this.saveSummaries[listIndex].index) {\r\n          return this.saveSummaries[listIndex]\r\n        }\r\n      }\r\n    },\r\n    loadSavedState () {\r\n      if (!this.selectedSlot) {\r\n        return\r\n      }\r\n      \r\n      const saves = fetchJSON(keys.saveData, {})\r\n      const summary = this.fetchSaveSummary()\r\n\r\n      if (!saves[this.selectedSlot]) {\r\n        return\r\n      }\r\n\r\n      this.loadState(\r\n        saves[this.selectedSlot].data,\r\n        summary\r\n      )\r\n    },\r\n    loadState (fieldState, saveSummary) {\r\n      this.$emit('loadSave', fieldState, saveSummary)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#file-import {\r\n  text-align: center;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  font-size: 0.8em;\r\n}\r\n\r\n#file-import-label {\r\n  display: block;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n#file-upload {\r\n  display: none;\r\n}\r\n\r\n#file-import-button, button {\r\n  display: block;\r\n  padding: 5px;\r\n  font-size: 1em;\r\n  font-weight: bolder;\r\n  font-family: belisa_plumilla;\r\n  border: 2px solid #48321f;\r\n  background-color: #caa76a;\r\n}\r\n\r\nbutton:not([disabled]):hover, #file-import-button:hover {\r\n  background-color: #efc67f;\r\n}\r\n\r\n#load-slot-list {\r\n  flex-grow: 1;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n#load-slot-list > div {\r\n  margin-bottom: 10px;\r\n  border-left: 5px solid #342517;\r\n  padding: 5px;\r\n  padding-left: 10px;\r\n  user-select: none;\r\n}\r\n\r\n#load-slot-list > div:hover {\r\n  background-color: #cccccc88;\r\n}\r\n\r\n#load-slot-list > div.selected-slot {\r\n  border-left: 5px solid #ccc;\r\n}\r\n\r\n#local-load button {\r\n  flex-grow: 0;\r\n}\r\n</style>","<template>\r\n  <div id=\"status-bar\" class=\"column-flex\">\r\n    <div id=\"farm-title\" class=\"section-header padding\">\r\n      <input id=\"farm-title-input\" \r\n        type=\"text\"\r\n        v-model=\"farmName\"\r\n        maxlength=\"32\"\r\n        placeholder=\"Name Your Farm Here!\"/>\r\n    </div>\r\n    <div id=\"season-select\">\r\n      <div id=\"season-selector-label\">\r\n        Season\r\n      </div>\r\n      <div>\r\n        <SeasonSwitch\r\n          v-for=\"(season, index) in seasons\"\r\n          :key=\"index\"\r\n          :config=\"season\"\r\n          :selected=\"isSeasonSelected(season)\"\r\n          @clicked=\"seasonClicked\"/>\r\n      </div>\r\n    </div>\r\n    \r\n    <hr class=\"section-divider\"/>\r\n\r\n    <div class=\"status-bar-width column-flex remaining-height\"  v-if=\"this.currentAction === 'inspect'\">\r\n      <Inspector\r\n        :farmDetail=\"farmDetail\"\r\n        :tileDetail=\"tileDetail\"\r\n        :plotDetail=\"plotDetail\"\r\n        :season=\"currentSeason\"/>\r\n    </div>\r\n    <div class=\"status-bar-width column-flex remaining-height\" :class=\"showOnAction('plant')\">\r\n      <CropSelector \r\n        :currentAction=\"currentAction\"\r\n        :actionDetails=\"actionDetails\"\r\n        @setActionDetails=\"setActionDetails\"\r\n        />\r\n    </div>\r\n    <div class=\"status-bar-width column-flex remaining-height\"  :class=\"showOnAction('export')\">\r\n      <Exporter\r\n        ref=\"exporter\"\r\n        :fieldState=\"fieldState\"\r\n        :currentSeason=\"currentSeason\"\r\n        :farmName=\"farmName\"\r\n        />\r\n    </div>\r\n    <div class=\"status-bar-width column-flex remaining-height\"  v-if=\"this.currentAction === 'import'\">\r\n      <Importer\r\n        :fieldState=\"fieldState\"\r\n        :currentSeason=\"currentSeason\"\r\n        :farmName=\"farmName\"\r\n        @loadSave=\"emitLoadSave\"\r\n        />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SeasonSwitch from './StatusBar/SeasonSwitch'\r\nimport CropSelector from './StatusBar/CropSelector'\r\nimport Inspector from './StatusBar/Inspector'\r\nimport Exporter from './StatusBar/Exporter'\r\nimport Importer from './StatusBar/Importer'\r\n\r\nimport seasons from '@/library/seasons'\r\n\r\nexport default {\r\n  name: 'StatusBar',\r\n  components: {\r\n    SeasonSwitch,\r\n    CropSelector,\r\n    Inspector,\r\n    Exporter,\r\n    Importer\r\n  },\r\n  props: [\r\n    'currentSeason',\r\n    'currentAction',\r\n    'actionDetails',\r\n    'fieldState',\r\n    'farmDetail',\r\n    'tileDetail',\r\n    'plotDetail'\r\n  ],\r\n  data () {\r\n    return {\r\n      seasons,\r\n      farmName: ''\r\n    }\r\n  },\r\n  methods: {\r\n    seasonClicked (season) {\r\n      this.$emit('selectSeason', season)\r\n    },\r\n    isSeasonSelected (config) {\r\n      return config.season === this.currentSeason\r\n    },\r\n    actionSelected (action) {\r\n      return action === this.currentAction\r\n    },\r\n    setActionDetails (actionDetails) {\r\n      this.$emit('setActionDetails', actionDetails)\r\n    },\r\n    showOnAction (action) {\r\n      return {'hidden-section': this.currentAction !== action}\r\n    },\r\n    emitLoadSave (fieldState, saveSummary) {\r\n      if (saveSummary) {\r\n        this.farmName = saveSummary.name\r\n        this.$refs.exporter.selectedSlot = saveSummary.index\r\n      }\r\n\r\n      this.$emit('loadSave', fieldState)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style>\r\n#status-bar {\r\n  height: 100%;\r\n  align-items: center;\r\n}\r\n\r\n.section-header {\r\n  font-family: belisa_plumilla;\r\n  text-align: center;\r\n}\r\n\r\n#farm-title input, #farm-title input::placeholder {\r\n  font-family: belisa_plumilla;\r\n  font-size: 1em;\r\n  font-weight: bolder;\r\n  width: 100%;\r\n  text-align: center;\r\n  border: 0px;\r\n  background-color: transparent;\r\n  color: inherit;\r\n}\r\n\r\n#farm-title input:focus::placeholder {\r\n  color: transparent;\r\n}\r\n\r\n.section-divider {\r\n  width: 80%;\r\n  border-width: thin;\r\n  border-style: solid;\r\n}\r\n\r\n#season-select {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.padding {\r\n  padding: 15px;\r\n}\r\n\r\n.space-around {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  flex-flow: row wrap;\r\n}\r\n\r\n.remaining-height {\r\n  flex: 1 1 auto;\r\n  overflow-y: auto;\r\n  min-height: 0px;\r\n}\r\n\r\n.remaining-height::-webkit-scrollbar {\r\n  width: 10px;\r\n}\r\n\r\n/* Track */\r\n.remaining-height::-webkit-scrollbar-track {\r\n  background: transparent; \r\n}\r\n \r\n/* Handle */\r\n.remaining-height::-webkit-scrollbar-thumb {\r\n  background: #342517; \r\n}\r\n\r\n/* Handle on hover */\r\n.remaining-height::-webkit-scrollbar-thumb:hover {\r\n  background: #ccc; \r\n}\r\n\r\n.status-bar-width {\r\n  width: 100%;\r\n  max-width: 350px;\r\n}\r\n\r\n.column-flex {\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  justify-content: flex-start;\r\n}\r\n\r\n.hidden-section {\r\n  display: none !important;\r\n}\r\n</style>\r\n","<template>\r\n  <img\r\n    :class=\"{ selectedTool: this.selected }\"\r\n    :src=\"imgSrc\"\r\n    @click=\"triggerEvent\"/>\r\n</template>\r\n\r\n<script>\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'Tool',\r\n  props: ['config', 'selected'],\r\n  data () {\r\n    return {\r\n      imgSrc: getResourcePath(this.config.image)\r\n    }\r\n  },\r\n  methods: {\r\n    triggerEvent () {\r\n      this.$emit(\r\n        'clicked',\r\n        this.selected ? null : this.config.action\r\n      )\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\nimg {\r\n  display: block;\r\n  background-size: cover;\r\n  background-image: url(\"../../assets/toolbar/tool_bg.png\");\r\n\r\n  width: 50px;\r\n  height: 50px;\r\n  transition: width 0.2s, height 0.2s;\r\n}\r\n\r\n.selectedTool {\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n</style>\r\n","<template>\r\n  <div id=\"tool-bar\">\r\n    <div \r\n      class=\"tool-frame\"\r\n      v-for=\"(tool, index) in tools\"\r\n      :key=\"index\">\r\n      <Tool\r\n        :config=\"tool\"\r\n        :selected=\"isSelected(tool)\"\r\n        @clicked=\"toolClicked\"/>\r\n    </div>\r\n    <div class=\"action-stack-button\">\r\n      <div id=\"undo-button\" class=\"tool-frame\" :class=\"{'disable-action': !undoable}\">\r\n        <img :src=\"imgSrc('undo')\" @click=\"undo\"/>\r\n      </div>\r\n      <div \r\n        id=\"redo-button\"\r\n        class=\"tool-frame\"\r\n        :class=\"{'disable-action': !redoable}\">\r\n        <img :src=\"imgSrc('redo')\" @click=\"redo\"/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Tool from './ToolBar/Tool'\r\n\r\nimport tools from '@/library/tools'\r\nimport {getResourcePath} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'ToolBar',\r\n  components: { Tool },\r\n  props: [\r\n    'currentAction',\r\n    'undoable',\r\n    'redoable'\r\n  ],\r\n  data () {\r\n    return {\r\n      tools: tools\r\n    }\r\n  },\r\n  methods: {\r\n    toolClicked (action) {\r\n      this.$emit('selectAction', action)\r\n    },\r\n    isSelected (toolConfig) {\r\n      return toolConfig.action === this.currentAction\r\n    },\r\n    imgSrc (action) {\r\n      return getResourcePath(`toolbar/${action}.png`)\r\n    },\r\n    undo () {\r\n      if (this.undoable) {\r\n        this.$emit('undo')\r\n      }\r\n    },\r\n    redo () {\r\n      if (this.redoable) {\r\n        this.$emit('redo')\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\r\n<style scoped>\r\n  #tool-bar, .action-stack-button {\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    user-select: none;\r\n  }\r\n\r\n  .tool-frame {\r\n    height: 60px;\r\n    display: flex;\r\n    place-items: center;\r\n    background-color: #1b180e;\r\n    pointer-events: auto;\r\n  }\r\n  \r\n  #undo-button img, #redo-button img {\r\n    display: block;\r\n    position: relative;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  #undo-button, #redo-button {\r\n    display: block;\r\n    position: relative;\r\n\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n\r\n  #undo-button::before, #redo-button::before {\r\n    content: \"\";\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    background-image: url(\"../assets/toolbar/tool_bg.png\");\r\n    background-size: cover;\r\n  }\r\n\r\n  .disable-action::before, .disable-action::before {\r\n    filter: grayscale(100%);\r\n  }\r\n\r\n  .disable-action img {\r\n    opacity: 0.7;\r\n  }\r\n  \r\n  .action-stack-button {\r\n    width: 100%;\r\n  }\r\n\r\n  @media screen and (min-width: 780px) {\r\n    .tool-frame {\r\n      height: auto;\r\n    }\r\n    \r\n    .action-stack-button {\r\n      width: auto;\r\n    }\r\n  }\r\n</style>\r\n","<template>\r\n  <div id=\"startup\" :style=\"seasonalBgImage\">\r\n    <div id=\"startup-box\">\r\n      <h2>Create your farm!</h2>\r\n      <div id=\"create-farm-form\">\r\n        <div id=\"width-field\" class=\"dim-field\">\r\n          <label class=\"dim-field-label\">Columns:</label>\r\n          <input\r\n            required\r\n            ref=\"widthForm\"\r\n            type=\"number\"\r\n            step=\"1\"\r\n            class=\"dim-field-input\"\r\n            :min=\"minSize\"\r\n            :max=\"maxSize\"\r\n            v-model=\"inputWidth\"\r\n            />\r\n          <p v-if=\"inputWidthError\" class=\"dim-field-error\">\r\n            {{inputWidthError}}\r\n          </p>\r\n        </div>\r\n        <div id=\"height-field\" class=\"dim-field\">\r\n          <label class=\"dim-field-label\">Rows:</label>\r\n          <input\r\n            required\r\n            ref=\"heightForm\"\r\n            type=\"number\"\r\n            step=\"1\"\r\n            class=\"dim-field-input\"\r\n            :min=\"minSize\"\r\n            :max=\"maxSize\"\r\n            v-model=\"inputHeight\"\r\n            />\r\n          <p v-if=\"inputHeightError\" class=\"dim-field-error\">\r\n            {{inputHeightError}}\r\n          </p>\r\n        </div>\r\n        <button\r\n          id=\"dim-submit\"\r\n          type=\"button\"\r\n          @click=\"submitSize\">\r\n          START\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport seasons from '@/library/seasons'\r\nimport field from '@/library/field'\r\nimport {\r\n  isInteger,\r\n  valueBetweenInclusive,\r\n  getResourcePath\r\n} from '@/library/util'\r\n\r\nexport default {\r\n  name: 'Startup',\r\n  props: ['width', 'height', 'season'],\r\n  data () {\r\n    const minSize = field.minFarmSize;\r\n    const maxSize = field.maxFarmSize;\r\n    return {\r\n      tiles: {},\r\n      inputWidth: `${field.defaultTileCols}`, // input v-model must be string\r\n      inputHeight: `${field.defaultTileRows}`,\r\n      inputWidthError: null,\r\n      inputHeightError: null,\r\n      minSize,\r\n      maxSize\r\n    }\r\n  },\r\n  methods: {\r\n    submitSize () {\r\n      this.inputWidthError = null\r\n      this.inputHeightError = null\r\n      \r\n\r\n      this.inputWidthError = this.getDimensionInputError(+this.inputWidth)\r\n      this.inputHeightError = this.getDimensionInputError(+this.inputHeight)\r\n\r\n      if (this.inputWidthError || this.inputHeightError) {\r\n        return\r\n      }\r\n\r\n      const fieldData = {\r\n        width: +this.inputWidth,\r\n        height: +this.inputHeight,\r\n        season: this.season,\r\n        tiles: {}\r\n      }\r\n\r\n      this.$emit('finishSetup', fieldData)\r\n    },\r\n    getDimensionInputError (inputDim) {\r\n      let error = null\r\n\r\n      if (!isInteger(inputDim)) {\r\n        error = 'Must be an integer'\r\n      }\r\n      else if (!valueBetweenInclusive(inputDim, this.minSize, this.maxSize)) {\r\n        error = `Must be between ${this.minSize} and ${this.maxSize}`\r\n      }\r\n\r\n      return error\r\n    }\r\n  },\r\n  computed: {\r\n    seasonalBgImage () {\r\n      const turfPath = getResourcePath(seasons[this.season].turf)\r\n      return {\r\n        backgroundImage: `url(${turfPath})`,\r\n        backgroundSize: '768px',\r\n        backgroundRepeat: 'repeat',\r\n        transition: 'background-image 0.5s ease-in-out'\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#startup {\r\n  height: 100%;\r\n  position: relative;\r\n}\r\n\r\n#startup-box {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  box-sizing: border-box;\r\n  width: 350px;\r\n  max-width: calc(100vw - 30px);\r\n  border: ridge #48321f;\r\n  border-width: 4px;\r\n  padding: 15px;\r\n  background-color: #9b7b5d;\r\n\r\n  font-size: 0.75em;\r\n  color: #342517;\r\n}\r\n\r\n#startup-box h2 {\r\n  margin: 10px;\r\n  text-align: center;\r\n  font-family: belisa_plumilla;\r\n}\r\n\r\n.dim-field {\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.dim-field .dim-field-label {\r\n  flex: 0 0 80px;\r\n  text-align: right;\r\n  margin-right: 10px;\r\n}\r\n\r\n.dim-field .dim-field-input {\r\n  flex: 0 0 50px;\r\n\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  color: inherit;\r\n  font-weight: bold;\r\n  background-color: transparent;\r\n  border: 0px;\r\n  border-bottom: 2px solid;\r\n  text-align: right;\r\n}\r\n\r\n.dim-field .dim-field-error {\r\n  flex-grow: 1;\r\n  color: rgb(83, 13, 13);\r\n  font-size: 0.8em;\r\n  text-align: right;\r\n  margin: 0px;\r\n}\r\n\r\n#dim-submit {\r\n  display: block;\r\n  width: 100%;\r\n  padding: 15px;\r\n  font-size: 1em;\r\n  font-weight: bolder;\r\n  font-family: belisa_plumilla;\r\n  border-color: #48321f;\r\n  background-color: #caa76a;\r\n  letter-spacing: 5px;\r\n}\r\n\r\n#dim-submit:hover {\r\n  background-color: #efc67f;\r\n}\r\n</style>","<template>\r\n  <div id=\"app\">\r\n    <div id=\"navigation-bar-container\">\r\n      <NavigationBar/>\r\n    </div>\r\n    <div id=\"startup-container\" v-if=\"!fieldState\">\r\n      <Startup\r\n        :season=\"currentSeason\"\r\n        @finishSetup=\"setupFarm\"/>\r\n    </div>\r\n    <div id=\"field-canvas-container\" v-if=\"fieldState\">\r\n      <FieldCanvas\r\n        ref=\"field\"\r\n        :currentAction=\"currentAction\"\r\n        :currentSeason=\"currentSeason\"\r\n        :actionDetails=\"currentActionDetail\"\r\n        :fieldState=\"fieldState\"\r\n        @inspect=\"inspect\"\r\n        @action=\"actionDone\"/>\r\n    </div>\r\n    <div id=\"tool-bar-container\" v-if=\"fieldState\">\r\n      <ToolBar \r\n        :undoable=\"undoable\"\r\n        :redoable=\"redoable\"\r\n        :currentAction=\"currentAction\"\r\n        @selectAction=\"setAction\"\r\n        @undo=\"undo\"\r\n        @redo=\"redo\"/>\r\n    </div>\r\n    <div id=\"status-bar-container\">\r\n      <StatusBar\r\n        @selectSeason=\"setSeason\"\r\n        @setActionDetails=\"setActionDetails\"\r\n        @loadSave=\"loadSave\"\r\n        :currentAction=\"currentAction\"\r\n        :currentSeason=\"currentSeason\"\r\n        :actionDetails=\"currentActionDetail\"\r\n        :fieldState=\"fieldState\"\r\n        :farmDetail=\"farmDetail\"\r\n        :tileDetail=\"tileDetail\"\r\n        :plotDetail=\"plotDetail\"/>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport NavigationBar from './components/NavigationBar'\r\nimport FieldCanvas from './components/FieldCanvas'\r\nimport StatusBar from './components/StatusBar'\r\nimport ToolBar from './components/ToolBar'\r\nimport Startup from './components/Startup'\r\n\r\nimport field from '@/library/field'\r\n\r\nconst actionKeyCodeShortcut = {\r\n  Digit1: 'inspect',\r\n  Digit2: 'plant',\r\n  Digit3: 'destroy',\r\n  Digit4: 'plot',\r\n  Digit5: 'flatten',\r\n  Digit6: 'export'\r\n}\r\n\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    NavigationBar,\r\n    FieldCanvas,\r\n    StatusBar,\r\n    ToolBar,\r\n    Startup\r\n  },\r\n  data () {\r\n    return {\r\n      currentAction: 'import',\r\n      currentActionDetail: null,\r\n      currentSeason: field.defaultSeason,\r\n      fieldState: null,\r\n      actionDetails: {},\r\n      farmDetail: null,\r\n      tileDetail: null,\r\n      plotDetail: null,\r\n      undoStack: [],\r\n      redoStack: []\r\n    }\r\n  },\r\n  mounted () {\r\n    window.debugFarm = () => {\r\n      this.$refs.field.farmData.debugLog()\r\n    }\r\n    window.debugTile = (col, row) => {\r\n      this.$refs.field.farmData.getTile(col, row)\r\n        .debugLog(this.currentSeason)\r\n    }\r\n    document.addEventListener('keydown', e => this.keydown(e))\r\n  },\r\n  methods: {\r\n    setAction (action) {\r\n      this.currentAction = action\r\n      this.currentActionDetail = this.actionDetails[this.currentAction] || null\r\n\r\n      if (action === 'export') {\r\n        this.fieldState = this.$refs.field.toJSON()\r\n      }\r\n      else if (action === 'inspect') {\r\n        this.farmDetail = this.$refs.field.farmData.inspectReport()\r\n        this.tileDetail = null\r\n        this.plotDetail = null\r\n      }\r\n    },\r\n    setSeasonUndoable (season) {\r\n      const lastSeason = this.currentSeason\r\n      this.currentSeason = season\r\n\r\n      if (this.fieldState) {\r\n        this.$refs.field.farmData.season = season\r\n        this.fieldState = this.$refs.field.toJSON()\r\n      }\r\n\r\n      if (this.currentAction === 'inspect') {\r\n        this.farmDetail = this.$refs.field.farmData.inspectReport()\r\n      }\r\n\r\n      return {\r\n        type: 'setSeasonUndoable',\r\n        revert: () => this.setSeasonUndoable(lastSeason)\r\n      }\r\n    },\r\n    setSeason (season, skipUndo = false) {\r\n      const action = this.setSeasonUndoable(season)\r\n      if (!skipUndo) {\r\n        this.actionDone(action)\r\n      }\r\n    },\r\n    setActionDetails (actionDetails) {\r\n      this.actionDetails[this.currentAction] = actionDetails\r\n      this.currentActionDetail = actionDetails\r\n    },\r\n    loadSave (fieldState) {\r\n      this.undoStack = []\r\n      this.redoStack = []\r\n      this.setupFarm(fieldState)\r\n    },\r\n    setupFarm (fieldState) {\r\n      this.currentAction = null\r\n      this.currentActionDetail = null\r\n      this.fieldState = fieldState\r\n      this.currentSeason = fieldState.season\r\n      this.width = fieldState.width\r\n      this.height = fieldState.height\r\n    },\r\n    inspect ({tileDetail, plotDetail}) {\r\n      this.tileDetail = tileDetail\r\n      this.plotDetail = plotDetail\r\n    },\r\n    actionDone (action) {\r\n      this.undoStack.push(action)\r\n      this.redoStack = []\r\n    },\r\n    keydown (event) {\r\n      if (document.activeElement.tagName === 'INPUT') {\r\n        return\r\n      }\r\n\r\n      if (\r\n        (event.ctrlKey && event.shiftKey && event.code === 'KeyZ')\r\n        || (event.ctrlKey && event.code === 'KeyY')\r\n      ) {\r\n        this.redo()\r\n        event.preventDefault()\r\n        return\r\n      }\r\n      else if (event.ctrlKey && event.code === 'KeyZ') {\r\n        this.undo()\r\n        event.preventDefault()\r\n        return\r\n      }\r\n\r\n      if (\r\n        !event.ctrlKey\r\n        && !event.shiftKey\r\n        && this.fieldState\r\n      ) {\r\n        const action = actionKeyCodeShortcut[event.code]\r\n        if (action) {\r\n          this.setAction(action)\r\n          event.preventDefault()\r\n        }\r\n      }\r\n    },\r\n    undo () {\r\n      if (this.undoStack.length === 0) {\r\n        return\r\n      }\r\n\r\n      const action = this.undoStack.pop()\r\n\r\n      if (action && action.revert) {\r\n        const redo = action.revert()\r\n        this.redoStack.push(redo)\r\n      }\r\n    },\r\n    redo () {\r\n      if (this.redoStack.length === 0) {\r\n        return\r\n      }\r\n\r\n      const action = this.redoStack.pop()\r\n\r\n      if (action && action.revert) {\r\n        const undo = action.revert()\r\n        this.undoStack.push(undo)\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    undoable () {\r\n      return this.undoStack.length > 0\r\n    },\r\n    redoable () {\r\n      return this.redoStack.length > 0\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n  html, body {\r\n    height: 100%;\r\n    margin: 0;\r\n    background-color: #222;\r\n  }\r\n\r\n  #app {\r\n    height: 100%;\r\n    \r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  #navigation-bar-container {\r\n    height: 75px;\r\n\r\n    border-width: 0px; \r\n    border-bottom-width: 2px;\r\n    border-style: outset;\r\n    background-color: #333;\r\n    border-color: #222;\r\n  }\r\n\r\n  #field-canvas-container {\r\n    min-height: 500px;\r\n    max-height: calc(100vh - 170px);\r\n    overflow: auto;\r\n  }\r\n\r\n  #field-canvas-container::-webkit-scrollbar {\r\n    width: 5px;\r\n    height: 5px;\r\n  }\r\n\r\n  /* Track */\r\n  #field-canvas-container::-webkit-scrollbar-track {\r\n    background: #342517; \r\n  }\r\n\r\n  /* Track */\r\n  #field-canvas-container::-webkit-scrollbar-corner {\r\n    background: #342517; \r\n  }\r\n  \r\n  /* Handle */\r\n  #field-canvas-container::-webkit-scrollbar-thumb {\r\n    background: #9b7b5d; \r\n  }\r\n\r\n  #status-bar-container {\r\n    border: ridge #48321f;\r\n    border-width: 4px;\r\n    padding: 10px;\r\n    background-color: #9b7b5d;\r\n    color: #342517;\r\n\r\n    flex-grow: 1;\r\n    max-height: 100vh;\r\n  }\r\n\r\n  #tool-bar-container {\r\n    height: auto;\r\n    background-color: #1b180e;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    pointer-events: none;\r\n  }\r\n  \r\n  #startup-container {\r\n    color: #342517;\r\n    min-height: 500px;\r\n    max-height: calc(100vh - 170px);\r\n  }\r\n\r\n  @media screen and (min-width: 780px) {\r\n    #app {  \r\n      display: grid;\r\n      grid-template: 75px 1fr 60px / 1fr 300px;\r\n    }\r\n\r\n    #navigation-bar-container {\r\n      grid-area: 1/1/span 1/span 2;\r\n    }\r\n\r\n    #field-canvas-container {\r\n      grid-area: 2/1/span 2/span 1;\r\n      max-height: none;\r\n    }\r\n\r\n    #status-bar-container {\r\n      grid-area: 2/2/span 2/span 1;\r\n      max-height: none;\r\n    }\r\n\r\n    #tool-bar-container {\r\n      z-index: 1;\r\n      grid-area: 3/1/span 1/span 1;\r\n      background-color: transparent;\r\n    }\r\n\r\n    #startup-container {\r\n      grid-area: 2/1/span 2/ span 1;\r\n      max-height: none;\r\n    }\r\n  }\r\n</style>\r\n"]}